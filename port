#!/bin/bash
trap 'kill ${tunnel_pid:-} ${http_pid:-} ${tcp_pid:-} ${ssh_pid:-} ${req_pid:-} 2>/dev/null; exit' SIGINT SIGTERM

PORTS_FILE="/ports.info.txt"

# Colors for better visibility
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
reset="\033[0m"

# Utility Functions
network() {
    ping -c 4 -W 1 google.com > /dev/null 2>&1
    return $?
}

serveo_status() {
    wget -q --spider https://serveo.net/
    return $?
}

# Port Management Functions
add_port() {
    local type=$1
    local local_port=$2
    if [[ -z "$type" || -z "$local_port" ]]; then
        echo -e "${red}Please provide both type (http/tcp) and local port.${reset}"
        exit 1
    fi

    local random_port=$(shuf -i 1024-65535 -n 1)

    if [[ "$type" == "http" ]]; then
        ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net > /dev/null &
    elif [[ "$type" == "tcp" ]]; then
        ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net > /dev/null &
    else
        echo -e "${red}Invalid type. Use 'http' or 'tcp'.${reset}"
        exit 1
    fi

    ssh_pid=$!
    echo "${type}:${random_port}:${local_port}" >> $PORTS_FILE
    echo -e "${green}${type^} ${local_port} is now on serveo.net:${random_port}${reset}"
}

remove_port() {
    local local_port=$1
    if [[ -z "$local_port" ]]; then
        echo -e "${red}Please provide a local port to remove.${reset}"
        exit 1
    fi

    local line=$(grep ":${local_port}$" $PORTS_FILE)
    local random_port=$(echo "$line" | cut -d':' -f2)

    if [[ -z "$random_port" ]]; then
        echo -e "${red}Port ${local_port} not found.${reset}"
        exit 1
    fi

    pkill -f "ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net" > /dev/null
    sed -i "/${line}/d" $PORTS_FILE
    echo -e "${green}Port ${local_port} has been removed.${reset}"
}

refresh_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No ports to refresh.${reset}"
        exit 1
    fi

    while IFS= read -r line; do
        local type=$(echo $line | cut -d':' -f1)
        local random_port=$(echo $line | cut -d':' -f2)
        local local_port=$(echo $line | cut -d':' -f3)

        ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net > /dev/null &
    done < $PORTS_FILE

    echo -e "${green}Ports have been successfully refreshed.${reset}"
}

list_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No ports to list.${reset}"
        exit 1
    fi

    echo -e "${green}Current port mappings:${reset}"
    while IFS= read -r line; do
        local type=$(echo $line | cut -d':' -f1)
        local random_port=$(echo $line | cut -d':' -f2)
        local local_port=$(echo $line | cut -d':' -f3)
        echo -e "${type^} Local port ${local_port} -> Public port ${random_port} (serveo.net)"
    done < $PORTS_FILE
}

# Help Command
help_cmd() {
    echo -e "${green}Port Management Tool - Simplify your port forwarding with Serveo${reset}"
    echo
    echo -e "${yellow}Usage:${reset}"
    echo -e "  port add <http|tcp> <local_port>            Add a new HTTP or TCP port forwarding"
    echo -e "  port remove <local_port>                    Remove an existing port forwarding"
    echo -e "  port refresh                                Restart all active tunnels"
    echo -e "  port list                                   List all active port mappings"
    echo -e "  port help                                   Display this help message"
    echo
    echo -e "${yellow}Examples:${reset}"
    echo -e "  port add http 80                            Add an HTTP tunnel for local port 80"
    echo -e "  port add tcp 25565                          Add a TCP tunnel for local port 25565"
    echo -e "  port remove 80                              Remove the tunnel for local port 80"
    echo -e "  port list                                   View active tunnels"
    echo -e "  port refresh                                Restart all tunnels after a reboot"
    echo
    echo -e "Visit ${green}https://github.com/DevX-77/port${reset} for more information."
}

# Main Command Handler
case "$1" in
    http)
        host=${2:-localhost}
        [ -z "$3" ] && { echo -e "${red}Local port not specified.${reset}"; exit 1; }
        http "$@"
        ;;
    tcp)
        host=${2:-localhost}
        [ -z "$3" ] && { echo -e "${red}Local port not specified.${reset}"; exit 1; }
        tcp "$@"
        ;;
    ssh)
        host=${2:-localhost}
        [ -z "$3" ] && { echo -e "${red}Public hostname alias not specified.${reset}"; exit 1; }
        ssh_opt "$@"
        ;;
    add)
        add_port "$2" "$3"
        ;;
    remove)
        remove_port "$2"
        ;;
    refresh)
        refresh_ports
        ;;
    list)
        list_ports
        ;;
    help)
        help_cmd
        ;;
    *)
        echo -e "${red}Invalid command. Use '$0 help' for usage.${reset}"
        exit 1
        ;;
esac
