#!/bin/bash

# Exit trap for cleanup
trap 'kill ${ssh_pid:-} 2>/dev/null; exit' SIGINT SIGTERM

# Configuration
PORTS_FILE="/root/ports.info.txt"
LOG_FILE="/var/log/port.log"
LOCK_FILE="/var/lock/port.lock"

# Colors for better visibility
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
reset="\033[0m"

# Check for required dependencies
check_dependencies() {
    for cmd in ssh curl jq; do
        if ! command -v $cmd &>/dev/null; then
            echo -e "${red}Error: $cmd is not installed.${reset}"
            exit 1
        fi
    done
}

# Validate port input
validate_input() {
    local port=$1
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1 || "$port" -gt 65535 ]]; then
        echo -e "${red}Invalid port number. Please provide a port between 1 and 65535.${reset}"
        exit 1
    fi
}

# Add a new port tunnel
add_port() {
    local protocol=$1
    local local_port=$2
    local subdomain=$3

    validate_input "$local_port"

    # Build the SSH command
    ssh_command="ssh -o StrictHostKeyChecking=no -f -N"
    if [[ "$protocol" == "http" ]]; then
        ssh_command+=" -R 80:localhost:${local_port}"
        [[ -n "$subdomain" ]] && ssh_command+=" -R ${subdomain}.serveo.net:80:localhost:${local_port}"
    elif [[ "$protocol" == "tcp" ]]; then
        random_port=$(shuf -i 1024-65535 -n 1)
        ssh_command+=" -R ${random_port}:localhost:${local_port}"
    else
        echo -e "${red}Invalid protocol. Use 'http' or 'tcp'.${reset}"
        exit 1
    fi

    # Start the tunnel
    eval $ssh_command serveo.net >/dev/null 2>&1 &
    ssh_pid=$!

    # Save tunnel info
    echo "${local_port}:${ssh_pid}:${protocol}:${subdomain:-N/A}" >> $PORTS_FILE
    echo -e "${green}Tunnel created:${reset}"
    if [[ "$protocol" == "http" && -n "$subdomain" ]]; then
        echo "  Subdomain: ${subdomain}.serveo.net"
    elif [[ "$protocol" == "http" ]]; then
        echo "  Domain: serveo.net"
    else
        echo "  TCP: serveo.net:${random_port}"
    fi
}

# Remove an existing tunnel
remove_port() {
    local local_port=$1

    validate_input "$local_port"

    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No active tunnels.${reset}"
        return
    fi

    local tunnel_info
    tunnel_info=$(grep "^${local_port}:" $PORTS_FILE)

    if [[ -z "$tunnel_info" ]]; then
        echo -e "${red}No tunnel found for port ${local_port}.${reset}"
        return
    fi

    local ssh_pid
    ssh_pid=$(echo $tunnel_info | cut -d':' -f2)
    kill "$ssh_pid" >/dev/null 2>&1
    sed -i "/^${local_port}:/d" $PORTS_FILE

    echo -e "${green}Tunnel for port ${local_port} removed.${reset}"
}

# List all active tunnels
list_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No active tunnels.${reset}"
        return
    fi

    echo -e "${green}Active tunnels:${reset}"
    while IFS=: read -r port ssh_pid protocol subdomain; do
        if [[ "$protocol" == "http" && "$subdomain" != "N/A" ]]; then
            echo "  HTTP: ${subdomain}.serveo.net (Local Port: ${port})"
        elif [[ "$protocol" == "http" ]]; then
            echo "  HTTP: serveo.net (Local Port: ${port})"
        else
            echo "  TCP: serveo.net:${port} (Local Port: ${port})"
        fi
    done < "$PORTS_FILE"
}

# Refresh all tunnels
refresh_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No tunnels to refresh.${reset}"
        return
    fi

    while IFS=: read -r port ssh_pid protocol subdomain; do
        kill "$ssh_pid" >/dev/null 2>&1
        add_port "$protocol" "$port" "$subdomain"
    done < "$PORTS_FILE"

    echo -e "${green}Tunnels refreshed.${reset}"
}

# Help menu
help_cmd() {
    echo -e "${green}Port Management Tool${reset}"
    echo
    echo -e "${yellow}Usage:${reset}"
    echo "  port add <http|tcp> <local_port> [subdomain]  Add a new HTTP or TCP tunnel"
    echo "  port remove <local_port>                     Remove a tunnel"
    echo "  port list                                    List all active tunnels"
    echo "  port refresh                                 Restart all active tunnels"
    echo "  port help                                    Display this help message"
    echo
    echo -e "${yellow}Examples:${reset}"
    echo "  port add http 80 myapp                       Create an HTTP tunnel with subdomain 'myapp'"
    echo "  port add tcp 25565                           Create a TCP tunnel for port 25565"
    echo "  port remove 80                               Remove tunnel for port 80"
    echo "  port list                                    Show all active tunnels"
    echo
}

# Main command handler
check_dependencies
case "$1" in
    add)
        add_port "$2" "$3" "$4"
        ;;
    remove)
        remove_port "$2"
        ;;
    list)
        list_ports
        ;;
    refresh)
        refresh_ports
        ;;
    help|*)
        help_cmd
        ;;
esac
