#!/bin/bash

trap 'kill ${tunnel_pid:-} ${http_pid:-} ${tcp_pid:-} ${ssh_pid:-} ${req_pid:-} 2>/dev/null; exit' SIGINT SIGTERM

PORTS_FILE="/root/ports.info.txt"
LOG_FILE="/var/log/port.log"
LOCK_FILE="/var/lock/port.lock"

# Colors for better visibility
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
reset="\033[0m"

# Ensure only one instance of the script runs
exec 200>$LOCK_FILE
flock -n 200 || { echo -e "${red}Another instance is running.${reset}"; exit 1; }

# Install dependencies if missing
install_dependencies() {
    local dependencies=("ssh" "curl" "grep" "sed" "touch")
    local missing=()

    # Check for missing dependencies
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    # Install only if there are missing dependencies
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${yellow}Missing dependencies: ${missing[*]}. Installing...${reset}"
        
        if [[ -n "$(command -v apt-get)" ]]; then
            sudo apt-get update
            sudo apt-get install -y "${missing[@]}"
        elif [[ -n "$(command -v yum)" ]]; then
            sudo yum install -y "${missing[@]}"
        elif [[ -n "$(command -v pacman)" ]]; then
            sudo pacman -S --noconfirm "${missing[@]}"
        else
            echo -e "${red}Unable to install dependencies. Please install them manually.${reset}"
            exit 1
        fi
    else
        echo -e "${green}All dependencies are already installed.${reset}"
    fi
}

# Validate input port
validate_input() {
    local port=$1
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1 || "$port" -gt 65535 ]]; then
        echo -e "${red}Invalid port number. Provide a port between 1 and 65535.${reset}"
        exit 1
    fi
}

# Network check
network() {
    ping -c 4 -W 1 google.com > /dev/null 2>&1
    return $?
}

# Serveo status check
serveo_status() {
    curl -s --head https://serveo.net/ | head -n 1 | grep -q "200 OK"
    return $?
}

# Add a new port forwarding
add_port() {
    local protocol=$1
    local local_port=$2

    validate_input "$local_port"
    if [[ "$protocol" != "http" && "$protocol" != "tcp" ]]; then
        echo -e "${red}Invalid protocol. Use 'http' or 'tcp'.${reset}"
        exit 1
    fi

    local random_port=$(shuf -i 1024-65535 -n 1)
    local serveo_ip=$(dig +short serveo.net | head -n 1)

    local ssh_command="ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net"
    if [[ "$protocol" == "http" ]]; then
        ssh_command+=" -R 80:localhost:${local_port}"
    fi

    eval $ssh_command > /dev/null 2>&1 &
    ssh_pid=$!

    echo "${random_port}:${local_port}:${ssh_pid}" >> "$PORTS_FILE"
    echo -e "${green}${protocol^} ${local_port} is now available at:"
    echo -e "  - Domain: serveo.net:${random_port}"
    echo -e "  - IP: ${serveo_ip}:${random_port}${reset}"
}

# Remove an existing port forwarding
remove_port() {
    local local_port=$1

    validate_input "$local_port"

    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No ports configured.${reset}"
        exit 1
    fi

    local port_info
    port_info=$(grep ":${local_port}:" "$PORTS_FILE")

    if [[ -z "$port_info" ]]; then
        echo -e "${red}Port ${local_port} not found.${reset}"
        exit 1
    fi

    local ssh_pid
    ssh_pid=$(echo "$port_info" | cut -d':' -f3)

    kill "$ssh_pid" > /dev/null 2>&1
    sed -i "/${port_info}/d" "$PORTS_FILE"

    echo -e "${green}Port ${local_port} has been removed.${reset}"
}

# Refresh all port forwards
refresh_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No ports to refresh.${reset}"
        exit 1
    fi

    while IFS= read -r line; do
        random_port=$(echo "$line" | cut -d':' -f1)
        local_port=$(echo "$line" | cut -d':' -f2)

        ssh -o StrictHostKeyChecking=no -f -N -R ${random_port}:localhost:${local_port} serveo.net > /dev/null 2>&1 &
    done < "$PORTS_FILE"

    echo -e "${green}Ports have been successfully refreshed.${reset}"
}

# List active port forwards
list_ports() {
    if [[ ! -f "$PORTS_FILE" ]]; then
        echo -e "${yellow}No ports to list.${reset}"
        exit 1
    fi

    # Resolve Serveo's IP using nslookup
    local serveo_ip
    serveo_ip=$(nslookup serveo.net | awk '/^Address: / { print $2; exit }')

    if [[ -z "$serveo_ip" ]]; then
        serveo_ip="serveo.net (IP unavailable)"
        echo -e "${yellow}Warning: Unable to resolve Serveo.net. Using hostname.${reset}"
    fi

    echo -e "${green}Current port mappings:${reset}"
    while IFS= read -r line; do
        random_port=$(echo "$line" | cut -d':' -f1)
        local_port=$(echo "$line" | cut -d':' -f2)
        echo -e "${green}Local port ${local_port} ->"
        echo -e "  - Domain: serveo.net:${random_port}"
        echo -e "  - IP: ${serveo_ip}:${random_port}${reset}"
    done < "$PORTS_FILE"
}

# Manage the service manually
manual_service() {
    case "$1" in
        start)
            echo "Starting port management tool..."
            nohup $0 refresh > "$LOG_FILE" 2>&1 &
            echo $! > /var/run/port.pid
            echo "Service started."
            ;;
        stop)
            if [[ -f /var/run/port.pid ]]; then
                kill "$(cat /var/run/port.pid)" > /dev/null 2>&1
                rm -f /var/run/port.pid
                echo "Service stopped."
            else
                echo "Service is not running."
            fi
            ;;
        restart)
            $0 stop
            sleep 1
            $0 start
            ;;
        status)
            if [[ -f /var/run/port.pid ]]; then
                if ps -p "$(cat /var/run/port.pid)" > /dev/null; then
                    echo "Service is running (PID: $(cat /var/run/port.pid))."
                else
                    echo "Service is not running, but PID file exists."
                fi
            else
                echo "Service is not running."
            fi
            ;;
        *)
            echo "Usage: $0 service {start|stop|restart|status}"
            exit 1
            ;;
    esac
}

# Display help information
help_cmd() {
    echo -e "${green}Port Management Tool - Simplify your port forwarding with Serveo${reset}"
    echo
    echo -e "${yellow}Usage:${reset}"
    echo "  port add <http|tcp> <local_port>        Add a new HTTP or TCP port forwarding"
    echo "  port remove <local_port>                Remove an existing port forwarding"
    echo "  port refresh                            Restart all active tunnels"
    echo "  port list                               List all active port mappings"
    echo "  port service {start|stop|restart|status} Manage the service manually"
    echo "  port help                               Display this help message"
}

# Main Command Handler
install_dependencies

case "$1" in
    add)
        add_port "$2" "$3"
        ;;
    remove)
        remove_port "$2"
        ;;
    refresh)
        refresh_ports
        ;;
    list)
        list_ports
        ;;
    service)
        manual_service "$2"
        ;;
    help)
        help_cmd
        ;;
    *)
        echo -e "${red}Invalid command. Use 'port help' for usage.${reset}"
        exit 1
        ;;
esac

# Release the lock before exiting
flock -u 200
